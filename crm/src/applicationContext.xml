<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:tx="http://www.springframework.org/schema/tx" 
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">
	
	<!-- 使用外部的hibernate.cfg.xml信息 -->
	<!-- <bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
	</bean> -->
	
	<!-- 指定Spring读取properties文件 -->
	<context:property-placeholder location="classpath:db.properties"/>

	<!-- 1、将连接池放入容器中 -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- 在applicationContext.xml中配置hibernate信息 -->
	<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 引入orm元数据，指定orm的包路径，Spring会自动提取包中所有的配置 -->
		<property name="mappingDirectoryLocations" value="classpath:club/ityuchao/domain"></property>
	</bean>
	
	<!-- user -->
	<bean name="userDao" class="club.ityuchao.dao.impl.UserDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean name="userService" class="club.ityuchao.service.impl.UserServiceImpl">
		<property name="userDao" ref="userDao"></property>
	</bean>   
	<bean name="userAction" class="club.ityuchao.web.action.UserAction" scope="prototype">
		<property name="userService" ref="userService"></property>
	</bean>
	
	
	<!-- BaseDict -->
	<bean name="baseDictDao" class="club.ityuchao.dao.impl.BaseDictDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean name="baseDictService" class="club.ityuchao.service.impl.BaseDictServiceImpl">
		<property name="baseDicdao" ref="baseDictDao"></property>
	</bean>   
	<bean name="baseDictAction" class="club.ityuchao.web.action.BaseDictAction" scope="prototype">
		<property name="baseDictService" ref="baseDictService"></property>
	</bean>
	   
	<!-- customer -->
	<bean name="customerDao" class="club.ityuchao.dao.impl.CustomerDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean name="customerService" class="club.ityuchao.service.impl.CustomerServiceImpl">
		<property name="customerDao" ref="customerDao"></property>
	</bean>   
	<bean name="customerAction" class="club.ityuchao.web.action.CustomerAction" scope="prototype">
		<property name="customerService" ref="customerService"></property>
	</bean>
	
	<!-- linkMan -->
	<bean name="linkManDao" class="club.ityuchao.dao.impl.LinkManDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean name="linkManService" class="club.ityuchao.service.impl.LinkManServiceImpl">
		<property name="linkManDao" ref="linkManDao"></property>
	</bean>   
	<bean name="linkManAction" class="club.ityuchao.web.action.LinkManAction" scope="prototype">
		<property name="linkManService" ref="linkManService"></property>
	</bean>
	
	<!-- saleVisit -->
	<bean name="saleVisitDao" class="club.ityuchao.dao.impl.SaleVisitDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean name="saleVisitService" class="club.ityuchao.service.impl.SaleVisitServiceImpl">
		<property name="saleVisitdao" ref="saleVisitDao"></property>
	</bean>   
	<bean name="saleVisitAction" class="club.ityuchao.web.action.SaleVisitAction" scope="prototype">
		<property name="saleVisitService" ref="saleVisitService"></property>
	</bean>
	
	
	<!-- 核心事务管理器 -->
	<bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="persist*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="modify*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="remove*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* club.ityuchao.service.impl.*ServiceImpl.*(..))" id="txPc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPc"/>
	</aop:config>
	<tx:annotation-driven transaction-manager="transactionManager"/>
	   
	   
</beans>